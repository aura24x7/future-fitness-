rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isValidMeal() {
      let requiredFields = ['name', 'calories', 'protein', 'carbs', 'fat', 'timestamp', 'userId'];
      let hasAllFields = requiredFields.every(field => request.resource.data[field] != null);
      let validNumbers = request.resource.data.calories is number && 
                        request.resource.data.protein is number && 
                        request.resource.data.carbs is number && 
                        request.resource.data.fat is number;
      let validRanges = request.resource.data.calories >= 0 && 
                        request.resource.data.protein >= 0 && 
                        request.resource.data.carbs >= 0 && 
                        request.resource.data.fat >= 0;
      let validTimestamp = request.resource.data.timestamp is string && 
                          request.resource.data.timestamp.matches('^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.*Z$');
      let isUserMatch = request.resource.data.userId == request.auth.uid;
      
      return hasAllFields && validNumbers && validRanges && validTimestamp && isUserMatch;
    }

    // User document rules
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow write: if isAuthenticated() && isOwner(userId);

      // Meal collection rules
      match /meals/{mealId} {
        allow read: if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated() && isOwner(userId) && isValidMeal();
        allow update: if isAuthenticated() && isOwner(userId) && isValidMeal();
        allow delete: if isAuthenticated() && isOwner(userId);
      }
    }

    match /weight_logs/{document} {
      allow read, write: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /user_profiles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Connections rules - for friend connections
    match /connections/{connectionId} {
      // Allow read if user is one of the parties in the connection
      allow read: if isAuthenticated() && 
                 (connectionId.split('_')[0] == request.auth.uid || 
                  connectionId.split('_')[1] == request.auth.uid);
      
      // Allow create if the authenticated user is the initiator of the connection
      allow create: if isAuthenticated() && 
                   connectionId.split('_')[0] == request.auth.uid && 
                   request.resource.data.userId == request.auth.uid;
      
      // Allow update if user is one of the parties in the connection
      allow update: if isAuthenticated() && 
                   (connectionId.split('_')[0] == request.auth.uid || 
                    connectionId.split('_')[1] == request.auth.uid);
      
      // Allow delete only if user is one of the parties in the connection
      allow delete: if isAuthenticated() && 
                   (connectionId.split('_')[0] == request.auth.uid || 
                    connectionId.split('_')[1] == request.auth.uid);
    }
    
    // Notifications rules
    match /notifications/{notificationId} {
      // Allow read if the user is the recipient
      allow read: if isAuthenticated() && 
                 resource.data.recipientId == request.auth.uid;
      
      // Allow create if the user is the sender
      allow create: if isAuthenticated() && 
                   request.resource.data.senderId == request.auth.uid;
      
      // Allow update (marking as read) if user is the recipient
      allow update: if isAuthenticated() && 
                   resource.data.recipientId == request.auth.uid;
      
      // Allow delete if user is either the sender or recipient
      allow delete: if isAuthenticated() && 
                   (resource.data.senderId == request.auth.uid || 
                    resource.data.recipientId == request.auth.uid);
    }
  }
} 