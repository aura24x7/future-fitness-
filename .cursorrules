say "master" Every time before giving response

# Future Fitness

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context
Future Fitness is a modern fitness and wellness application built with React Native and Expo. It provides features for fitness tracking, meal logging, analytics, and AI-powered fitness assistance.

The application focuses on:
- Fitness and workout tracking
- Meal and nutrition logging
- Analytics and progress visualization
- AI-powered natural language food logging
- Personalized workout recommendations

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)

### Repository Structure
```
future-fitness/
├── src/                          # Application source code
│   ├── components/               # React Native components
│   │   ├── analytics/           # Data visualization components
│   │   │   ├── MacroBarChart.tsx
│   │   │   └── MacroTooltip.tsx
│   │   ├── activity/            # Workout & activity tracking
│   │   ├── calorie/             # Calorie tracking & food logging
│   │   ├── charts/              # Chart components
│   │   ├── common/              # Shared UI components
│   │   │   ├── Button.tsx
│   │   │   ├── Input.tsx
│   │   │   └── Card.tsx
│   │   ├── food/                # Food tracking components
│   │   │   ├── FoodLogItem.tsx
│   │   │   └── MealTypeSelector.tsx
│   │   ├── monitoring/          # Progress tracking
│   │   ├── ProfileGroups/       # Social & group features
│   │   ├── sharing/             # Content sharing
│   │   ├── sync/                # Data synchronization
│   │   ├── themed/              # Theme-aware components
│   │   └── weight/              # Weight tracking
│   │
│   ├── screens/                 # Application screens
│   │   ├── onboarding/         # User onboarding flow
│   │   │   ├── WeightGoalScreen.tsx
│   │   │   ├── WeightTargetDateScreen.tsx
│   │   │   ├── BirthdayScreen.tsx
│   │   │   └── NameInputScreen.tsx
│   │   ├── auth/               # Authentication screens
│   │   │   ├── LoginScreen.tsx
│   │   │   ├── RegisterScreen.tsx
│   │   │   └── ForgotPasswordScreen.tsx
│   │   ├── main/               # Core app screens
│   │   │   ├── DashboardScreen.tsx
│   │   │   ├── ProfileScreen.tsx
│   │   │   ├── AnalyticsScreen.tsx
│   │   │   └── SettingsScreen.tsx
│   │   └── features/           # Feature-specific screens
│   │       ├── FoodScreen.tsx
│   │       └── ActivityScreen.tsx
│   │
│   ├── firebase/               # Firebase configuration
│   │   ├── config.ts          # Firebase initialization
│   │   ├── auth.ts            # Authentication methods
│   │   ├── firestore.ts       # Firestore utilities
│   │   └── storage.ts         # Storage utilities
│   │
│   ├── context/                # Application contexts
│   │   ├── LoadingContext.tsx  # Loading state management
│   │   ├── SimpleFoodLogContext.tsx # Food logging state
│   │   ├── GymBuddyAlertContext.tsx # Workout notifications
│   │   ├── ProfileGroupsContext.tsx # Group management
│   │   └── MealContext.tsx     # Meal planning state
│   │
│   ├── services/               # Backend services
│   │   └── userProfileService.ts # User data management
│   │
│   ├── utils/                  # Utility functions
│   │   └── transforms/         # Data transformations
│   │       ├── victoryChartTransforms.ts
│   │       └── giftedChartTransforms.ts
│   │
│   ├── hooks/                  # Custom React hooks
│   ├── types/                  # TypeScript definitions
│   ├── constants/              # Application constants
│   ├── store/                  # State management
│   ├── reducers/              # State reducers
│   ├── theme/                 # UI theming
│   ├── config/                # App configuration
│   ├── backup/                # Backup utilities
│   └── dev-utils/             # Development tools
│
├── assets/                     # Static resources
│   ├── images/                # Image assets
│   └── fonts/                 # Custom fonts
│
├── docs/                      # Documentation
│   ├── implementation_plans/  # Feature specifications
│   │   ├── FIREBASE_RN_IMPLEMENTATION_PLAN.md
│   │   ├── SPLASH_SCREEN_IMPLEMENTATION_PLAN.md
│   │   └── weight_progress_implementation_plan.md
│   └── technical/            # Technical documentation
│       ├── expo_datepicker.md
│       └── gifted_charts_doc.md
│
├── scripts/                   # Build & maintenance scripts
│
├── config/                    # Project configuration
│   ├── babel.config.js       # Babel configuration
│   └── metro.config.js       # Metro bundler config
│
└── [Configuration Files]      # Root configuration files
    ├── app.json              # Expo configuration
    ├── package.json          # Dependencies & scripts
    ├── yarn.lock             # Yarn lock file
    ├── tsconfig.json         # TypeScript configuration
    ├── tamagui.config.ts     # UI framework config
    ├── .env                  # Environment variables
    └── .env.development      # Development environment
```
## Tech Stack
- React Native
- Expo (SDK 52)
- TypeScript
- Tamagui UI
- Google Generative AI
- Zustand (State Management)
- React Navigation
- Expo Notifications
- React Native Reanimated
- React Native Gifted Charts
- React Native Vision Camera

## Naming Conventions
- Use lowercase with dashes for directories (e.g., `components/food-log`)
- Use PascalCase for component files (e.g., `MacroBarChart.tsx`)
- Use camelCase for utility files (e.g., `victoryChartTransforms.ts`)
- Use descriptive names for AI service files (e.g., `naturalLanguageFoodService.ts`)

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Use explicit return types for all functions
- Implement proper type safety for AI response handling
- Use discriminated unions for complex state management

## State Management
- Use Zustand for global state management
- Implement proper state persistence using AsyncStorage
- Use React Context for feature-specific state (e.g., `SimpleFoodLogContext`, `MealContext`)
- Implement proper cleanup in useEffect hooks
- Handle loading and error states consistently

## AI Integration
- Implement proper error handling for AI service calls
- Use type-safe prompts and responses
- Implement proper rate limiting and caching
- Handle API failures gracefully
- Keep AI service logic modular and maintainable

## Syntax and Formatting
- Use "function" keyword for pure functions
- Implement proper TypeScript discriminated unions
- Follow consistent formatting for AI prompts
- Keep transformation functions pure and testable

## UI and Styling
- Use Tamagui for UI components
- use nativewind for styling
- Implement consistent theming
- Use proper layout components from React Native
- Follow platform-specific design guidelines
- Implement proper loading states and animations

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully
- Implement proper error handling for AI services


## Testing
- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test AI integration thoroughly
- Test offline functionality
- Test performance on different devices

## Security
- Implement proper Firebase security rules
- Sanitize user inputs
- Handle sensitive data properly
- Implement proper authentication flows
- Secure AI API keys and credentials

## Git Usage
### Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

### Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

## Documentation
- Maintain clear README with setup instructions
- Document AI integration and data flows
- Keep API documentation up to date
- Document environment variables
- Maintain clear documentation for AI prompts

## Development Workflow
- Use proper version control
- Implement proper code review process
- Test on both iOS and Android
- Follow semantic versioning for releases
- Maintain changelog
- Test AI features thoroughly before deployment

## Performance
- Implement proper memoization
- Optimize AI API calls
- Implement proper caching strategies
- Monitor and optimize bundle size
- Implement proper lazy loading


## 
---

# Coding pattern preferences 
Always prefer simple solutions 
I 
- Avoid duplication of code whenever possible, which means checking for other areas of the codebase that might already have similar code and functionality 
- Write code that takes into account the different environments: dev, test, and prod 
You are careful to only make changes that are requested or you are confident are well understood and related to the change being requested 
When fixing an issue or bug, do not introduce a new pattern or technology without first exhausting all options for the existing implementation. And if you finally do this, make sure to remove the old ipmlementation afterwards so we don't have duplicate logic. 
Keep the codebase very clean and organized 
Avoid writing scripts in files if possible, especially if the script is likely only to be run once 
Avoid having files over 200-300 lines of code. Refactor at that point. 
Mocking data is only needed for tests, never mock data for dev or prod 
- Never add stubbing or fake data patterns to code that affects the dev or prod environments 
- Never overwrite my .env file without first asking and confirming


# Coding workflow preferences 
-Focus on the areas of code relevant to the task 
Do not touch code that is unrelated to the task 
-Write thorough tests for all major functionality 
-Avoid making major changes to the patterns and architecture of how a 25 feature works, after it has shown to work well, unless explicitly structed 
- Always think about what other methods and areas of code might be affected by code changes


This cursor rules file is specifically tailored to the Future Fitness application, focusing on its unique aspects like AI integration, fitness tracking, and analytics while maintaining high code quality and development standards.

